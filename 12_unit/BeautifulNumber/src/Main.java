public class Main {
    public static void main(String[] args) {
        Numbers numbers = new Numbers();
        numbers.generateCoolNumber();
        numbers.searchBinaryInList("А111ВТ191");
        numbers.searchLineInList("А111ВТ191");
        numbers.searchInHashSet("А111ВК103");
        numbers.searchInTreeSet("А111ВК103");


    }
}
/*
Реализуйте метод генерации «красивых» автомобильных номеров generateCoolNumbers()
в классе CoolNumbers. Используйте следующие правила генерации номеров:
XYZ — различный набор из списка разрешенных букв, N — цифры, R — регион (от 01 до 199);
XNNNYZR — пример: A111BC197, У777HC66.
В госномерах автомобилей в РФ используются следующие буквы: А, В, Е, К, М, Н, О, Р, С, Т, У, Х.
В коллекции должно быть не менее 2 млн номеров.


Реализуйте методы поиска класса CoolNumbers по поиску номеров в каждой коллекции:
прямым перебором по ArrayList,
бинарным поиском по сортированному ArrayList,
поиском в HashSet,
поиском в TreeSet.

Измерьте и выведите длительность каждого метода поиска. Формат вывода результатов поиска:
Поиск перебором: номер найден/не найден, поиск занял 34нс
Бинарный поиск: номер найден/не найден, поиск занял 34нс
Поиск в HashSet: номер найден/не найден, поиск занял 34нс
Поиск в TreeSet: номер найден/не найден, поиск занял 34нс
В видео Поиск и сортировка неточно указана оценка результата работы метода
бинарного поиска Collections.binarySearch(). Метод возвращает int, если возвращаемое значение больше или равно нулю — это означает, что элемент найден. Если возвращаемое значение int меньше нуля — элемент в коллекции не найден.



Рекомендации
сортировка не входит в учёт времени для бинарного поиска;
для детального сравнения методов поиска используйте время в наносекундах:   System.nanoTime()
 */
